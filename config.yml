# This YAML file allows for a few cases of variable substitution:
#   $MAP_NAME --> the value of `--map-name NAME`
#   $INPUT_DIR --> the value of {container.input_dir}
#   $OUTPUT_DIR --> the value of {container.output_dir} + `--job-name`
#   $TEMP_DIR --> the value of {container.temp_dir} + `--job-name`
#   $REPO_DIR --> the value of {container.repo_dir}

host:
    input_dir: /cdr/inputs
    output_dir: /cdr/outputs
    temp_dir: /cdr/temps
    repo_dir: /cdr/repos
    runs_dir: /cdr/runs


container:
    input_dir: /ta1/inputs
    output_dir: /ta1/outputs
    temp_dir: /ta1/temps
    repo_dir: /ta1/repos


modules:
    # ---------------------------------------------------------------------------
    # LEGEND_SEGMENT
    # ---------------------------------------------------------------------------
    # where: integration/legend_segment
    # by: Uncharted
    # requires: (nothing)
    # produces: X_map_segmentation.json
    -   name: legend_segment
        gpu: true
        options:
            # input:
            input: $INPUT_DIR/maps/$MAP_NAME
            model: $INPUT_DIR/modules/legend_segment/layoutlmv3_20240531
            # output:
            output: $OUTPUT_DIR/legend_segment
            # temp:
            workdir: $TEMP_DIR/legend_segment
            # misc:


    # ---------------------------------------------------------------------------
    # LEGEND_ITEM_SEGMENT
    # ---------------------------------------------------------------------------
    # where: segmentation/legend_item_segmentation
    # by: Fandel
    # requires: legend_segment
    # produces: geojson
    -   name: legend_item_segment
        gpu: true
        options:
            # input:
            input_image: $INPUT_DIR/maps/$MAP_NAME/$MAP_NAME.tif
            input_legend_segmentation: $OUTPUT_DIR/legend_segment/$MAP_NAME_map_segmentation.json
            # output:
            output_dir: $OUTPUT_DIR/legend_item_segment
            log: $OUTPUT_DIR/legend_item_segment/run.log
            # temp:
            path_to_intermediate: $TEMP_DIR/legend_item_segment
            # misc:
            postprocessing_for_crs: True
            competition_custom: False
            version: 1.2
            only_poly: False


    # ---------------------------------------------------------------------------
    # LEGEND_ITEM_DESCRIPTION
    # ---------------------------------------------------------------------------
    # where: segmentation/legend_item_description_segment
    # by: Weiwei
    # requires: legend_segment, legend_item_segment
    # produces: json
    -   name: legend_item_description
        gpu: true
        options:
            # inputs:
            map_dir: $INPUT_DIR/maps/$MAP_NAME
            symbol_json_dir: $OUTPUT_DIR/legend_item_segment
            legend_json_dir: $OUTPUT_DIR/legend_segment
            # outputs:
            output_dir: $OUTPUT_DIR/legend_item_description
            log_path: $OUTPUT_DIR/legend_item_description/run.log
            # temp:
            temp_dir: $TEMP_DIR/legend_item_description
            # misc:
            map_name: $MAP_NAME
    
     # ---------------------------------------------------------------------------
    # PTLN_LEGEND_ITEM_DESCRIPTION
    # ---------------------------------------------------------------------------
    # where: segmentation/layoutlmv3
    # by: Weiwei
    # requires: legend_segment
    # produces: json
    -   name: ptln_legend_item_description
        gpu: true
        options:
            # inputs:
            map_input_dir: $INPUT_DIR/maps/$MAP_NAME
            legend_input_dir: $OUTPUT_DIR/legend_segment
            # outputs:
            output_dir: $OUTPUT_DIR/ptln_legend_item_description
            # temp:
            temp_dir: $TEMP_DIR/ptln_legend_item_description
            # misc:
            map_name: $MAP_NAME


    # ---------------------------------------------------------------------------
    # MAP_CROP
    # ---------------------------------------------------------------------------
    # where: system/image_crop
    # by: Weiwei
    # requires: legend_segment
    # produces: PNGs
    -   name: map_crop
        gpu: true
        options:
            # inputs:
            input_dir: $INPUT_DIR/maps/$MAP_NAME
            legend_dir: $OUTPUT_DIR/legend_segment
            # outputs:
            output_dir: $OUTPUT_DIR/map_crop
            log_path: $OUTPUT_DIR/map_crop/run.log
            # temp:
            # misc:
            map_name: $MAP_NAME
            patch_sizes: [1000, 256, 640]
            strides: [1000, 200, 320]
            only_crop_map_area: [True, True, True]

    # ---------------------------------------------------------------------------
    # TEXT_SPOTTING
    # ---------------------------------------------------------------------------
    # where: integration/text_spotting
    # by: Weiwei (Zekun)
    # requires: map_crop
    # produced: geojson
    -   name: text_spotting
        gpu: true
        user: root
        options:
            # inputs:
            input_dir_path: $OUTPUT_DIR/map_crop/feature-extraction/$MAP_NAME_g1000_s1000_wo_legend
            # outputs:
            output_folder: $OUTPUT_DIR/text_spotting
            # temp:
            # misc:
            model_weight_path: $INPUT_DIR/modules/text_spotting/trained_weights/model_v2_en.pth
            spotter_config: $INPUT_DIR/modules/text_spotting/inference_en.yaml
            map_kurator_system_dir: $REPO_DIR/usc-umn-inferlink-ta1/system/mapkurator/mapkurator-system
            text_spotting_model_dir: $REPO_DIR/usc-umn-inferlink-ta1/system/mapkurator/spotter-v2
            expt_name: $MAP_NAME
            module_text_spotting: ""
            spotter_model: spotter-v2
            spotter_expt_name: $MAP_NAME
            module_img_geojson: ""
    
    # ---------------------------------------------------------------------------
    # COORDINATE_SPOTTING
    # ---------------------------------------------------------------------------
    # where: integration/coordinate_spotting
    # by: Yijun
    # requires: map_crop
    # produced: geojson
    -   name: coordinate_spotting
        gpu: true
        user: root
        options:
            # inputs:
            input_dir_path: $OUTPUT_DIR/map_crop/georef/
            # outputs:
            output_folder: $OUTPUT_DIR/coordinate_spotting
            # temp:
            # misc:
            model_weight_path: $INPUT_DIR/modules/coordinate_spotting/trained_weights/model_v2_coord.pth
            spotter_config: $INPUT_DIR/modules/coordinate_spotting/inference_coord.yaml
            map_kurator_system_dir: $REPO_DIR/usc-umn-inferlink-ta1/system/mapkurator/mapkurator-system
            text_spotting_model_dir: $REPO_DIR/usc-umn-inferlink-ta1/system/mapkurator/spotter-v2
            expt_name: $MAP_NAME
            module_text_spotting: ""
            spotter_model: spotter-v2
            spotter_expt_name: $MAP_NAME
            module_img_geojson: ""

    # ---------------------------------------------------------------------------
    # LINE_EXTRACT
    # ---------------------------------------------------------------------------
    # where: line
    # by: Weiwei
    # requires: legend_item_description, map_crop
    # produces: geojson
    -   name: line_extract
        gpu: true
        user: cmaas
        options:
            # inputs:
            config: $INPUT_DIR/modules/line_extract/usgs_railroads.yaml
            trained_model_dir: $INPUT_DIR/modules/line_extract/trained_weights
            map_legend_json: $OUTPUT_DIR/legend_item_description
            cropped_image_dir: $OUTPUT_DIR/map_crop/$MAP_NAME_g256_s200_wo_legend
            # outputs:
            prediction_dir: $OUTPUT_DIR/line_extract
            # temp:
            # misc:
            map_name: $MAP_NAME
            cuda_visible_device: 0
            predict_raster: ""
            predict_vector: ""


    # ---------------------------------------------------------------------------
    # POLYGON_EXTRACT
    # ---------------------------------------------------------------------------
    # where: polygon
    # by: Fandel
    # requires: legend_item_segment
    # produces: geojson?
    -   name: polygon_extract
        gpu: true
        options:
            # inputs:
            path_to_tif: $INPUT_DIR/maps/$MAP_NAME/$MAP_NAME.tif
            path_to_json: $OUTPUT_DIR/legend_item_segment/$MAP_NAME_PolygonType_internal.json
            path_to_legend_solution: $OUTPUT_DIR/legend_item_segment/$MAP_NAME_PolygonType.geojson
            path_to_bound: $OUTPUT_DIR/legend_item_segment/$MAP_map_segementation.json
            path_to_legend_description: $OUTPUT_DIR/legend_item_description/$MAP_NAME_polygon.json
            # outputs:
            dir_to_vector_output: $OUTPUT_DIR/polygon_extract
            # temp:
            dir_to_intermediate: $TEMP_DIR/polygon_extract
            # misc:
            log: $OUTPUT_DIR/polygon_extract/run.log

    # ---------------------------------------------------------------------------
    # POINT_EXTRACT
    # ---------------------------------------------------------------------------
    # where: point
    # by: Leeje
    # requires: legend_item_description, map_crop
    # produces: TIF, geojson
    -   name: point_extract
        gpu: true
        options:
            ## inputs:
            map_dir: $INPUT_DIR/maps/$MAP_NAME
            map_metadata_dir: $OUTPUT_DIR/ptln_legend_item_description
            map_patches_dir: $OUTPUT_DIR/map_crop/feature-extraction/
            model_weights_dir: $REPO_DIR/usc-umn-inferlink-ta1/point/src/pipeline-scripts/model_weights
            symbol_info_json_file: $REPO_DIR/usc-umn-inferlink-ta1/point/src/pipeline-scripts/automated_model_selection_img_txt/data/symbol_info.json
            strike_model_dir: $REPO_DIR/usc-umn-inferlink-ta1/point/src/pipeline-scripts/strike_model_weights/
            cropped_legend_patches_dir: $OUTPUT_DIR/map_crop/feature-extraction/
            image_based_model_weight: $REPO_DIR/usc-umn-inferlink-ta1/point/src/pipeline-scripts/automated_model_selection_img_txt/data/model.pt
            # outputs:
            output_dir_root: $OUTPUT_DIR/point_extract
            # misc:
            gpu_id: 0


    # ---------------------------------------------------------------------------
    # GEOREFERENCE
    # ---------------------------------------------------------------------------
    # where: georeference
    # by: Weiwei
    # requires: (none)
    # produces: json
    -   name: georeference
        gpu: true
        options:
            # inputs:
            input_path: $INPUT_DIR/maps/$MAP_NAME/$MAP_NAME.tif
            support_data_dir: $INPUT_DIR/modules/georeference/support_data
            # outputs:
            output_path: $OUTPUT_DIR/georeference/$MAP_NAME.json
            # temp:
            temp_dir: $TEMP_DIR/georeference
            # misc:
            gpu_id: 0
            # reformat: ""


    # ---------------------------------------------------------------------------
    # GEOPACKAGE
    # ---------------------------------------------------------------------------
    # where: geopackage
    # by: Weiwei
    # requires: point_extract, line_extract, polygon_extract, georeference, legend_segment
    # produces: ?
    -   name: geopackage
        gpu: true
        options:
            # inputs:
            nongeoref_map_dir: $INPUT_DIR/maps/$MAP_NAME
            layout_output_dir: $OUTPUT_DIR/legend_item_description
            georef_output_dir: $OUTPUT_DIR/georeference
            poly_output_dir: $OUTPUT_DIR/polygon_extract
            ln_output_dir: $OUTPUT_DIR/line_extract
            pt_output_dir: $OUTPUT_DIR/point_extract/output-per-symbol
            # outputs:
            output_dir: $OUTPUT_DIR/geopackage/gpkg_outputs
            georef_map_output: $OUTPUT_DIR/geopackage
            # temp:
            # misc:
            map_name: $MAP_NAME
            log_path: $OUTPUT_DIR/geopackage/run.log
